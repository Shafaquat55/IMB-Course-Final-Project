import sys

import requests
from bs4 import BeautifulSoup
import re
import unicodedata
import pandas as pd






def date_time(table_cells):
    
    return [data_time.strip() for data_time in list(table_cells.strings)][0:2]

def booster_version(table_cells):
   
    out=''.join([booster_version for i,booster_version in enumerate( table_cells.strings) if i%2==0][0:-1])
    return out

def landing_status(table_cells):
    
    out=[i for i in table_cells.strings][0].replace('\n','')
    return out
def get_mass(table_cells):
    mass=unicodedata.normalize("NFKD", table_cells.text).strip()
    if mass:
        mass.find("kg")
        new_mass=mass[0:mass.find("kg")+2]
    else:
        new_mass=0
    return new_mass


def extract_column_from_header(row):
   
    if (row.br):
        row.br.extract()
        
    if row.a:
        row.a.extract()
    if row.sup:
        row.sup.extract()
        
    colunm_name = ' '.join(row.contents)
     
    if not(colunm_name.strip().isdigit()):
        colunm_name = colunm_name.strip()
        #print(colunm_name)
        return colunm_name
        
    
static_url = "https://en.wikipedia.org/w/index.php?title=List_of_Falcon_9_and_Falcon_Heavy_launches&oldid=1027686922"





#TASK 1: Request the Falcon9 Launch Wiki page from its URL

data=requests.get(static_url).text
soup = BeautifulSoup(data, 'html5lib')
page_title=soup.title.text
print(age_title)





#TASK 2: Extract all column/variable names from the HTML table header

first_launch_table = html_tables[2]
print(first_launch_table)

page_table=soup.find_all('tr')
column_names = []

for row in page_table[2].find_all('th'):
    column_names.append(extract_column_from_header(row))
    #print(row.contents) 
 
print(column_names)





#TASK 3: Create a data frame by parsing the launch HTML tables
 
launch_dict= dict.fromkeys(column_names)
del launch_dict['Date and time ( )']
del launch_dict['']
launch_dict['Flight No.'] = []
launch_dict['Launch site'] = []
launch_dict['Payload'] = []
launch_dict['Payload mass'] = []
launch_dict['Orbit'] = []
launch_dict['Customer'] = []
launch_dict['Launch outcome'] = []
launch_dict['Version Booster']=[]
launch_dict['Booster landing']=[]
launch_dict['Date']=[]
launch_dict['Time']=[]
    
extracted_row = 0
for table_number,table in enumerate(soup.find_all('table',"wikitable plainrowheaders collapsible")):
    for rows in table.find_all("tr"):   
        if rows.th:
            if rows.th.string:
                flight_number=rows.th.string.strip()
                flag=flight_number.isdigit()
                
        else:
            flag=False
        #get table element 
        
        row=rows.find_all('td')
        #if it is number save cells in a dictonary 
        if flag:
            extracted_row += 1
            # Flight Number value
            # TODO: Append the flight_number into launch_dict with key `Flight No.`
            #print(flight_number)
            launch_dict['Flight No.'].append(flight_number)
            datatimelist=date_time(row[0])

            
            
            # Date value
            # TODO: Append the date into launch_dict with key `Date`
            date = datatimelist[0].strip(',')
            launch_dict['Date'].append(date)
            #print(date)
            
            # Time value
            # TODO: Append the time into launch_dict with key `Time`
            time = datatimelist[1]
            launch_dict['Time'].append(time)
            #print(time)
              
            # Booster version
            # TODO: Append the bv into launch_dict with key `Version Booster`
            bv=booster_version(row[1])
            if not(bv):
                bv=row[1].a.string
                #print(bv)
            launch_dict['Version Booster'].append(bv)
            # Launch Site
            # TODO: Append the bv into launch_dict with key `Launch Site`
            launch_site = row[2].a.string
            #print(launch_site)
            launch_dict['Launch site'].append(launch_site)
            
            # Payload
            # TODO: Append the payload into launch_dict with key `Payload`
            payload = row[3].a.string
            #print(payload)
            launch_dict['Payload'].append(payload)
            
            payload_mass = get_mass(row[4])
            launch_dict['Payload mass'].append(payload_mass)
            
            orbit = row[5].a.string
            #print(orbit)
            launch_dict['Orbit'].append(orbit)
            # Customer
            # TODO: Append the customer into launch_dict with key `Customer`

            if row[6].a:
                customer = row[6].a.string
            else:
                customer='Various'
            #print(customer)
            launch_dict['Customer'].append(customer)
            # Launch outcome
            # TODO: Append the launch_outcome into launch_dict with key `Launch outcome`
            launch_outcome = list(row[7].strings)[0]
            #print(launch_outcome)
            launch_dict['Launch outcome'].append(launch_outcome)
            # Booster landing
            # TODO: Append the launch_outcome into launch_dict with key `Booster landing`
            booster_landing = landing_status(row[8])
            #print(booster_landing)
            launch_dict['Booster landing'].append(booster_landing)

df= pd.DataFrame({ key:pd.Series(value) for key, value in launch_dict.items() })
df.to_csv('spacex_web_scraped.csv', index=False)
